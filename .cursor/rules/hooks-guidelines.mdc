---
description: 
globs: 
alwaysApply: false
---
# 钩子函数开发规范

## 目录结构

```
packages/hooks/src/
├── hooks/                # 钩子函数目录
│   ├── [hook]/          # 具体钩子
│   │   ├── index.ts     # 钩子实现
│   │   └── types.ts     # 类型定义
│   └── index.ts         # 钩子导出
├── types/               # 通用类型定义
└── index.ts            # 主入口文件
```

## 开发规范

1. 命名规范
   - 钩子名使用 camelCase
   - 以 use 开头
   - 文件名使用 kebab-case
   - 类型名使用 PascalCase

2. 类型定义
   - 为参数定义类型
   - 为返回值定义类型
   - 使用泛型增加灵活性
   - 导出类型定义

3. 实现规范
   - 使用组合式 API
   - 处理响应式数据
   - 处理生命周期
   - 清理副作用

4. 文档规范
   - 说明钩子用途
   - 描述参数和返回值
   - 提供使用示例
   - 说明注意事项

## 最佳实践

1. 钩子设计
   - 保持功能单一
   - 提供合理的默认值
   - 支持配置选项
   - 考虑可组合性

2. 性能优化
   - 避免不必要的计算
   - 使用 computed 缓存
   - 优化依赖收集
   - 及时清理资源

3. 错误处理
   - 参数类型检查
   - 异常情况处理
   - 提供错误提示
   - 优雅降级处理

## 使用示例

```typescript
// 钩子定义
function useMyHook(options: HookOptions) {
  const state = ref(options.initialValue)
  
  // 处理副作用
  onMounted(() => {
    // 初始化逻辑
  })
  
  onUnmounted(() => {
    // 清理逻辑
  })
  
  // 返回状态和方法
  return {
    state,
    update: (value: string) => {
      state.value = value
    }
  }
}

// 使用钩子
const { state, update } = useMyHook({
  initialValue: 'default'
})
```

## 测试规范

1. 单元测试
   - 测试基本功能
   - 测试参数处理
   - 测试返回值
   - 测试副作用

2. 集成测试
   - 测试组件集成
   - 测试状态管理
   - 测试生命周期
   - 测试错误处理

## 发布流程

1. 版本管理
   - 遵循语义化版本
   - 使用 changesets 管理版本
   - 更新 CHANGELOG.md

2. 构建发布
   - 运行 `pnpm build` 构建
   - 使用 `pnpm publish:hooks` 发布
   - 确保文档同步更新
