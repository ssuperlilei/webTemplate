---
description: 
globs: 
alwaysApply: false
---
# 工具函数开发规范

## 目录结构

```
packages/utils/src/
├── [category]/              # 功能分类目录
│   ├── [function].ts       # 具体功能实现
│   └── index.ts           # 分类导出文件
├── types/                  # 类型定义
└── index.ts               # 主入口文件
```

## 开发规范

1. 函数命名
   - 使用 camelCase
   - 名称应该清晰表达功能
   - 避免使用缩写（除非是通用缩写）

2. 类型定义
   - 必须使用 TypeScript
   - 为所有参数和返回值定义类型
   - 使用泛型增加函数灵活性
   - 导出类型定义供其他模块使用

3. 文档规范
   - 使用 JSDoc 注释
   - 说明函数用途
   - 描述参数和返回值
   - 提供使用示例

4. 测试要求
   - 编写单元测试
   - 测试正常情况
   - 测试边界情况
   - 测试异常情况

## 最佳实践

1. 函数设计
   - 保持函数单一职责
   - 避免副作用
   - 提供合理的默认值
   - 考虑性能优化

2. 错误处理
   - 使用 TypeScript 类型约束
   - 提供清晰的错误信息
   - 合理使用异常处理
   - 考虑兼容性

3. 性能优化
   - 避免重复计算
   - 使用缓存机制
   - 优化循环和递归
   - 考虑内存使用

## 发布流程

1. 版本管理
   - 遵循语义化版本
   - 使用 changesets 管理版本
   - 更新 CHANGELOG.md

2. 构建发布
   - 运行 `pnpm build` 构建
   - 使用 `pnpm publish:utils` 发布
   - 确保文档同步更新
