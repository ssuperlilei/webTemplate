---
description: 
globs: 
alwaysApply: false
---
# 代码规范指南

## 通用规范

1. 文件命名
   - 使用 kebab-case 命名文件
   - 组件文件使用 PascalCase
   - 测试文件以 `.test.ts` 或 `.spec.ts` 结尾

2. 代码格式
   - 使用 2 空格缩进
   - 使用单引号
   - 行尾使用分号
   - 最大行长度 100 字符

3. 注释规范
   - 使用 JSDoc 风格注释
   - 关键代码需要注释说明
   - 避免无意义的注释
   - 保持注释的及时更新

## TypeScript 规范

1. 类型定义
   - 优先使用 interface 定义对象类型
   - 使用 type 定义联合类型和工具类型
   - 避免使用 any
   - 合理使用泛型

2. 命名规范
   - 接口名以 I 开头
   - 类型名以 T 开头
   - 枚举名使用 PascalCase
   - 常量使用 UPPER_SNAKE_CASE

## Vue 规范

1. 组件规范
   - 使用 `<script setup>` 语法
   - Props 必须定义类型
   - 使用 defineProps 和 defineEmits
   - 避免使用 this

2. 模板规范
   - 使用 kebab-case 命名属性
   - 使用 v-bind 简写
   - 使用 v-on 简写
   - 合理使用指令

3. 样式规范
   - 使用 scoped 样式
   - 遵循 BEM 命名
   - 使用 CSS 变量
   - 避免使用 !important

## 测试规范

1. 单元测试
   - 使用 Vitest
   - 测试文件与源文件同名
   - 使用 describe 和 it 组织测试
   - 测试用例命名清晰

2. 测试覆盖
   - 核心功能 100% 覆盖
   - 边界情况必须测试
   - 异常情况必须测试
   - 保持测试代码简洁

## Git 规范

1. 提交信息
   - 使用 commitlint
   - 遵循 Conventional Commits
   - 提交信息清晰明确
   - 关联 issue 编号

2. 分支管理
   - 主分支：main
   - 开发分支：dev
   - 功能分支：feature/*
   - 修复分支：fix/*

## 构建规范

1. 构建配置
   - 使用 Vite 构建
   - 配置合理的构建目标
   - 优化构建性能
   - 处理资源文件

2. 发布流程
   - 版本号管理
   - 更新日志
   - 构建检查
   - 发布确认
