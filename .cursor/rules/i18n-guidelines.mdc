---
description: 
globs: 
alwaysApply: false
---
# 国际化开发规范

## 目录结构

```
packages/i18n/src/
├── locales/                # 语言包目录
│   ├── zh-CN/             # 中文语言包
│   │   ├── common.ts      # 通用翻译
│   │   └── index.ts       # 语言包入口
│   └── en-US/             # 英文语言包
├── types/                 # 类型定义
└── index.ts              # 主入口文件
```

## 开发规范

1. 语言包组织
   - 按功能模块分类
   - 使用扁平化结构
   - 避免深层嵌套
   - 保持键名语义化

2. 命名规范
   - 使用点号分隔的命名空间
   - 键名使用小写字母
   - 使用有意义的命名
   - 保持命名一致性

3. 类型定义
   - 为所有翻译键定义类型
   - 使用 TypeScript 类型推导
   - 导出类型定义
   - 保持类型同步更新

4. 翻译规范
   - 使用占位符处理变量
   - 支持复数形式
   - 处理特殊字符
   - 考虑文化差异

## 最佳实践

1. 翻译管理
   - 使用 i18n 工具管理
   - 保持翻译完整性
   - 定期更新翻译
   - 处理缺失翻译

2. 性能优化
   - 按需加载语言包
   - 缓存已加载翻译
   - 优化加载策略
   - 减少重复翻译

3. 开发流程
   - 先开发默认语言
   - 同步更新其他语言
   - 进行翻译审查
   - 保持翻译一致性

## 使用示例

```typescript
// 定义翻译键
const messages = {
  'common.welcome': '欢迎使用',
  'common.hello': '你好，{name}',
  'common.items': '{count} 个项目'
}

// 使用翻译
t('common.welcome')
t('common.hello', { name: 'John' })
t('common.items', { count: 5 })
```

## 发布流程

1. 版本管理
   - 遵循语义化版本
   - 使用 changesets 管理版本
   - 更新 CHANGELOG.md

2. 构建发布
   - 运行 `pnpm build` 构建
   - 使用 `pnpm publish:i18n` 发布
   - 确保文档同步更新
