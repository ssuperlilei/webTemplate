---
description: 
globs: 
alwaysApply: false
---
# 自定义指令开发规范

## 目录结构

```
packages/directives/src/
├── directives/            # 指令目录
│   ├── [directive]/      # 具体指令
│   │   ├── index.ts      # 指令实现
│   │   └── types.ts      # 类型定义
│   └── index.ts          # 指令导出
├── types/                # 通用类型定义
└── index.ts             # 主入口文件
```

## 开发规范

1. 命名规范
   - 指令名使用 kebab-case
   - 文件名使用 kebab-case
   - 类型名使用 PascalCase
   - 保持命名语义化

2. 类型定义
   - 为指令参数定义类型
   - 为指令钩子函数定义类型
   - 导出类型定义
   - 使用 TypeScript 类型推导

3. 指令实现
   - 实现必要的钩子函数
   - 处理指令参数
   - 处理指令更新
   - 清理指令副作用

4. 文档规范
   - 说明指令用途
   - 描述参数和修饰符
   - 提供使用示例
   - 说明注意事项

## 最佳实践

1. 指令设计
   - 保持指令功能单一
   - 提供合理的默认值
   - 支持参数配置
   - 考虑性能影响

2. 性能优化
   - 避免不必要的更新
   - 优化事件监听
   - 及时清理资源
   - 使用防抖/节流

3. 错误处理
   - 参数类型检查
   - 异常情况处理
   - 提供错误提示
   - 优雅降级处理

## 使用示例

```typescript
// 指令定义
const vMyDirective = {
  mounted(el, binding) {
    // 指令挂载时的处理
  },
  updated(el, binding) {
    // 指令更新时的处理
  },
  unmounted(el) {
    // 指令卸载时的处理
  }
}

// 使用指令
<div v-my-directive:arg.modifier="value"></div>
```

## 测试规范

1. 单元测试
   - 测试指令挂载
   - 测试指令更新
   - 测试指令卸载
   - 测试参数处理

2. 集成测试
   - 测试与其他组件交互
   - 测试性能影响
   - 测试边界情况
   - 测试错误处理

## 发布流程

1. 版本管理
   - 遵循语义化版本
   - 使用 changesets 管理版本
   - 更新 CHANGELOG.md

2. 构建发布
   - 运行 `pnpm build` 构建
   - 使用 `pnpm publish:directives` 发布
   - 确保文档同步更新
